"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showRoutePicker = exports.onAvAudioSessionRoutesChanged = exports.onExternalPlaybackAvailabilityChanged = exports.AirplayConnectivityEventEmitter = exports.ExternalPlaybackAvailabilityEventEmitter = exports.AV_AUDIO_SESSION_ROUTES_CHANGED = exports.EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED = exports.ExternalPlaybackAvailabilityContext = exports.AirplayConnectivityContext = void 0;

var _reactNative = require("react-native");

const {
  RAEvents,
  RAAirplayConnectivityContext,
  RAExternalPlaybackAvailabilityContext,
  RARoutePickerContext
} = _reactNative.NativeModules;
const constants = RAEvents === null || RAEvents === void 0 ? void 0 : RAEvents.getConstants();
const AirplayConnectivityContext = RAAirplayConnectivityContext;
exports.AirplayConnectivityContext = AirplayConnectivityContext;
const ExternalPlaybackAvailabilityContext = RAExternalPlaybackAvailabilityContext;
exports.ExternalPlaybackAvailabilityContext = ExternalPlaybackAvailabilityContext;
const {
  EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED,
  AV_AUDIO_SESSION_ROUTES_CHANGED
} = constants !== null && constants !== void 0 ? constants : {};
exports.AV_AUDIO_SESSION_ROUTES_CHANGED = AV_AUDIO_SESSION_ROUTES_CHANGED;
exports.EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED = EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED;
const ExternalPlaybackAvailabilityEventEmitter = new _reactNative.NativeEventEmitter(RAExternalPlaybackAvailabilityContext);
exports.ExternalPlaybackAvailabilityEventEmitter = ExternalPlaybackAvailabilityEventEmitter;
const AirplayConnectivityEventEmitter = new _reactNative.NativeEventEmitter(RAAirplayConnectivityContext);
exports.AirplayConnectivityEventEmitter = AirplayConnectivityEventEmitter;

const onExternalPlaybackAvailabilityChanged = callback => ExternalPlaybackAvailabilityEventEmitter.addListener(EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED, callback);

exports.onExternalPlaybackAvailabilityChanged = onExternalPlaybackAvailabilityChanged;

const onAvAudioSessionRoutesChanged = callback => AirplayConnectivityEventEmitter.addListener(AV_AUDIO_SESSION_ROUTES_CHANGED, callback);

exports.onAvAudioSessionRoutesChanged = onAvAudioSessionRoutesChanged;

const showRoutePicker = options => {
  var _RARoutePickerContext;

  if (_reactNative.Platform.OS !== 'ios' && RARoutePickerContext === undefined) {
    console.warn('showRoutePicker is only supported on iOS');
  }

  return (_RARoutePickerContext = RARoutePickerContext === null || RARoutePickerContext === void 0 ? void 0 : RARoutePickerContext.showRoutePicker(options)) !== null && _RARoutePickerContext !== void 0 ? _RARoutePickerContext : Promise.resolve();
};

exports.showRoutePicker = showRoutePicker;
//# sourceMappingURL=airplayModule.js.map