{"version":3,"sources":["hooks.ts"],"names":["useExternalPlaybackAvailability","options","isExternalPlaybackAvailable","setIsExternalPlaybackAvailable","useCachedValue","subscription","ExternalPlaybackAvailabilityContext","fetchExternalPlaybackAvailability","then","remove","bind","useAirplayConnectivity","routes","useAirplayRoutes","length","useAvAudioSessionRoutes","filter","route","portType","setRoutes","AirplayConnectivityContext","fetchAvAudioSessionRoutes"],"mappings":";;;;;;;AAAA;;AAEA;;AAYO,MAAMA,+BAA+B,GAC1CC,OAD6C,IAE1C;AAAA;;AACH,QAAM,CAACC,2BAAD,EAA8BC,8BAA9B,IACJ,qBAAS,KAAT,CADF;AAGA,wBAAU,MAAM;AAAA;;AACd,iCAAIF,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEG,cAAb,yEAA+B,KAA/B,EAAsC;AAEtC,UAAMC,YAAY,GAAG,0DACnBF,8BADmB,CAArB;AAIAG,+LAAqCC,iCAArC,GAAyEC,IAAzE,CACEL,8BADF;AAIA,WAAOE,YAAY,CAACI,MAAb,CAAoBC,IAApB,CAAyBL,YAAzB,CAAP;AACD,GAZD,EAYG,2BAACJ,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEG,cAAV,2EAA4B,KAA5B,CAZH;AAcA,SAAOF,2BAAP;AACD,CArBM;;;;AAuBA,MAAMS,sBAAsB,GAAG,MAAM;AAC1C,QAAMC,MAAM,GAAGC,gBAAgB,EAA/B;AACA,SAAOD,MAAM,CAACE,MAAP,GAAgB,CAAvB;AACD,CAHM;;;;AAKA,MAAMD,gBAAgB,GAAG,MAAM;AACpC,QAAMD,MAAM,GAAGG,uBAAuB,EAAtC;AACA,SAAOH,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,QAAN,KAAmB,SAA1C,CAAP;AACD,CAHM;;;;AAKA,MAAMH,uBAAuB,GAAG,MAAM;AAC3C,QAAM,CAACH,MAAD,EAASO,SAAT,IAAsB,qBAAgC,EAAhC,CAA5B;AAEA,wBAAU,MAAM;AACd,UAAMd,YAAY,GAAG,kDAA8Bc,SAA9B,CAArB;AAEAC,oKAA4BC,yBAA5B,GAAwDb,IAAxD,CAA6DW,SAA7D;AAEA,WAAOd,YAAY,CAACI,MAAb,CAAoBC,IAApB,CAAyBL,YAAzB,CAAP;AACD,GAND,EAMG,EANH;AAQA,SAAOO,MAAP;AACD,CAZM","sourcesContent":["import {useEffect, useState} from 'react';\n\nimport {\n  AirplayConnectivityContext,\n  AvAudioSessionRoute,\n  ExternalPlaybackAvailabilityContext,\n  onAvAudioSessionRoutesChanged,\n  onExternalPlaybackAvailabilityChanged,\n} from './airplayModule';\n\nexport type UseExternalPlaybackAvailabilityOptions = {\n  useCachedValue?: boolean;\n};\n\nexport const useExternalPlaybackAvailability = (\n  options?: UseExternalPlaybackAvailabilityOptions,\n) => {\n  const [isExternalPlaybackAvailable, setIsExternalPlaybackAvailable] =\n    useState(false);\n\n  useEffect(() => {\n    if (options?.useCachedValue ?? false) return;\n\n    const subscription = onExternalPlaybackAvailabilityChanged(\n      setIsExternalPlaybackAvailable,\n    );\n\n    ExternalPlaybackAvailabilityContext?.fetchExternalPlaybackAvailability().then(\n      setIsExternalPlaybackAvailable,\n    );\n\n    return subscription.remove.bind(subscription);\n  }, [options?.useCachedValue ?? false]);\n\n  return isExternalPlaybackAvailable;\n};\n\nexport const useAirplayConnectivity = () => {\n  const routes = useAirplayRoutes();\n  return routes.length > 0;\n};\n\nexport const useAirplayRoutes = () => {\n  const routes = useAvAudioSessionRoutes();\n  return routes.filter(route => route.portType === 'AirPlay');\n};\n\nexport const useAvAudioSessionRoutes = () => {\n  const [routes, setRoutes] = useState<AvAudioSessionRoute[]>([]);\n\n  useEffect(() => {\n    const subscription = onAvAudioSessionRoutesChanged(setRoutes);\n\n    AirplayConnectivityContext?.fetchAvAudioSessionRoutes().then(setRoutes);\n\n    return subscription.remove.bind(subscription);\n  }, []);\n\n  return routes;\n};\n"]}