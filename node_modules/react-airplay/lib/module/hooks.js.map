{"version":3,"sources":["hooks.ts"],"names":["useEffect","useState","AirplayConnectivityContext","ExternalPlaybackAvailabilityContext","onAvAudioSessionRoutesChanged","onExternalPlaybackAvailabilityChanged","useExternalPlaybackAvailability","options","isExternalPlaybackAvailable","setIsExternalPlaybackAvailable","useCachedValue","subscription","fetchExternalPlaybackAvailability","then","remove","bind","useAirplayConnectivity","routes","useAirplayRoutes","length","useAvAudioSessionRoutes","filter","route","portType","setRoutes","fetchAvAudioSessionRoutes"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,SACEC,0BADF,EAGEC,mCAHF,EAIEC,6BAJF,EAKEC,qCALF,QAMO,iBANP;AAYA,OAAO,MAAMC,+BAA+B,GAC1CC,OAD6C,IAE1C;AAAA;;AACH,QAAM,CAACC,2BAAD,EAA8BC,8BAA9B,IACJR,QAAQ,CAAC,KAAD,CADV;AAGAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,iCAAIO,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEG,cAAb,yEAA+B,KAA/B,EAAsC;AAEtC,UAAMC,YAAY,GAAGN,qCAAqC,CACxDI,8BADwD,CAA1D;AAIAN,IAAAA,mCAAmC,SAAnC,IAAAA,mCAAmC,WAAnC,YAAAA,mCAAmC,CAAES,iCAArC,GAAyEC,IAAzE,CACEJ,8BADF;AAIA,WAAOE,YAAY,CAACG,MAAb,CAAoBC,IAApB,CAAyBJ,YAAzB,CAAP;AACD,GAZQ,EAYN,2BAACJ,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEG,cAAV,2EAA4B,KAA5B,CAZM,CAAT;AAcA,SAAOF,2BAAP;AACD,CArBM;AAuBP,OAAO,MAAMQ,sBAAsB,GAAG,MAAM;AAC1C,QAAMC,MAAM,GAAGC,gBAAgB,EAA/B;AACA,SAAOD,MAAM,CAACE,MAAP,GAAgB,CAAvB;AACD,CAHM;AAKP,OAAO,MAAMD,gBAAgB,GAAG,MAAM;AACpC,QAAMD,MAAM,GAAGG,uBAAuB,EAAtC;AACA,SAAOH,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,QAAN,KAAmB,SAA1C,CAAP;AACD,CAHM;AAKP,OAAO,MAAMH,uBAAuB,GAAG,MAAM;AAC3C,QAAM,CAACH,MAAD,EAASO,SAAT,IAAsBvB,QAAQ,CAAwB,EAAxB,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,YAAY,GAAGP,6BAA6B,CAACoB,SAAD,CAAlD;AAEAtB,IAAAA,0BAA0B,SAA1B,IAAAA,0BAA0B,WAA1B,YAAAA,0BAA0B,CAAEuB,yBAA5B,GAAwDZ,IAAxD,CAA6DW,SAA7D;AAEA,WAAOb,YAAY,CAACG,MAAb,CAAoBC,IAApB,CAAyBJ,YAAzB,CAAP;AACD,GANQ,EAMN,EANM,CAAT;AAQA,SAAOM,MAAP;AACD,CAZM","sourcesContent":["import {useEffect, useState} from 'react';\n\nimport {\n  AirplayConnectivityContext,\n  AvAudioSessionRoute,\n  ExternalPlaybackAvailabilityContext,\n  onAvAudioSessionRoutesChanged,\n  onExternalPlaybackAvailabilityChanged,\n} from './airplayModule';\n\nexport type UseExternalPlaybackAvailabilityOptions = {\n  useCachedValue?: boolean;\n};\n\nexport const useExternalPlaybackAvailability = (\n  options?: UseExternalPlaybackAvailabilityOptions,\n) => {\n  const [isExternalPlaybackAvailable, setIsExternalPlaybackAvailable] =\n    useState(false);\n\n  useEffect(() => {\n    if (options?.useCachedValue ?? false) return;\n\n    const subscription = onExternalPlaybackAvailabilityChanged(\n      setIsExternalPlaybackAvailable,\n    );\n\n    ExternalPlaybackAvailabilityContext?.fetchExternalPlaybackAvailability().then(\n      setIsExternalPlaybackAvailable,\n    );\n\n    return subscription.remove.bind(subscription);\n  }, [options?.useCachedValue ?? false]);\n\n  return isExternalPlaybackAvailable;\n};\n\nexport const useAirplayConnectivity = () => {\n  const routes = useAirplayRoutes();\n  return routes.length > 0;\n};\n\nexport const useAirplayRoutes = () => {\n  const routes = useAvAudioSessionRoutes();\n  return routes.filter(route => route.portType === 'AirPlay');\n};\n\nexport const useAvAudioSessionRoutes = () => {\n  const [routes, setRoutes] = useState<AvAudioSessionRoute[]>([]);\n\n  useEffect(() => {\n    const subscription = onAvAudioSessionRoutesChanged(setRoutes);\n\n    AirplayConnectivityContext?.fetchAvAudioSessionRoutes().then(setRoutes);\n\n    return subscription.remove.bind(subscription);\n  }, []);\n\n  return routes;\n};\n"]}