{"version":3,"sources":["airplayModule.ts"],"names":["NativeEventEmitter","NativeModules","Platform","RAEvents","RAAirplayConnectivityContext","RAExternalPlaybackAvailabilityContext","RARoutePickerContext","constants","getConstants","AirplayConnectivityContext","ExternalPlaybackAvailabilityContext","EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED","AV_AUDIO_SESSION_ROUTES_CHANGED","ExternalPlaybackAvailabilityEventEmitter","AirplayConnectivityEventEmitter","onExternalPlaybackAvailabilityChanged","callback","addListener","onAvAudioSessionRoutesChanged","showRoutePicker","options","OS","undefined","console","warn","Promise","resolve"],"mappings":"AAAA,SACEA,kBADF,EAGEC,aAHF,EAIEC,QAJF,QAKO,cALP;AA8DA,MAAM;AACJC,EAAAA,QADI;AAEJC,EAAAA,4BAFI;AAGJC,EAAAA,qCAHI;AAIJC,EAAAA;AAJI,IAKFL,aALJ;AAYA,MAAMM,SAAS,GAAGJ,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,YAAV,EAAlB;AAEA,OAAO,MAAMC,0BAA0B,GAAGL,4BAAnC;AACP,OAAO,MAAMM,mCAAmC,GAC9CL,qCADK;AAGP,OAAO,MAAM;AACXM,EAAAA,sCADW;AAEXC,EAAAA;AAFW,IAGTL,SAHS,aAGTA,SAHS,cAGTA,SAHS,GAGI,EAHV;AAKP,OAAO,MAAMM,wCAAwC,GAAG,IAAIb,kBAAJ,CACtDK,qCADsD,CAAjD;AAIP,OAAO,MAAMS,+BAA+B,GAAG,IAAId,kBAAJ,CAC7CI,4BAD6C,CAAxC;AAIP,OAAO,MAAMW,qCAAqC,GAChDC,QADmD,IAGnDH,wCAAwC,CAACI,WAAzC,CACEN,sCADF,EAEEK,QAFF,CAHK;AAQP,OAAO,MAAME,6BAA6B,GACxCF,QAD2C,IAG3CF,+BAA+B,CAACG,WAAhC,CACEL,+BADF,EAEEI,QAFF,CAHK;AAQP,OAAO,MAAMG,eAAe,GAAIC,OAAD,IAAqC;AAAA;;AAClE,MAAIlB,QAAQ,CAACmB,EAAT,KAAgB,KAAhB,IAAyBf,oBAAoB,KAAKgB,SAAtD,EAAiE;AAC/DC,IAAAA,OAAO,CAACC,IAAR,CAAa,0CAAb;AACD;;AAED,kCAAOlB,oBAAP,aAAOA,oBAAP,uBAAOA,oBAAoB,CAAEa,eAAtB,CAAsCC,OAAtC,CAAP,yEAAyDK,OAAO,CAACC,OAAR,EAAzD;AACD,CANM","sourcesContent":["import {\n  NativeEventEmitter,\n  NativeModule,\n  NativeModules,\n  Platform,\n} from 'react-native';\n\nexport type ExternalPlaybackAvailabilityContext = NativeModule & {\n  fetchExternalPlaybackAvailability: () => Promise<boolean>;\n};\n\n/* As per https://developer.apple.com/documentation/avfaudio/avaudiosession/port */\nexport type AvAudioSessionPortType =\n  | 'BuiltInMic'\n  | 'HeadsetMic'\n  | 'LineIn'\n  | 'AirPlay'\n  | 'BluetoothA2DP'\n  | 'BluetoothLE'\n  | 'BuiltInReceiver'\n  | 'BuiltInSpeaker'\n  | 'HDMI'\n  | 'Headphones'\n  | 'LineOut'\n  | 'AVB'\n  | 'BluetoothHFP'\n  | 'DisplayPort'\n  | 'CarAudio'\n  | 'FireWire'\n  | 'PCI'\n  | 'Thunderbolt'\n  | 'UsbAudio'\n  | 'Virtual';\n\nexport interface AvAudioSessionChannel {\n  channelName: string;\n  channelNumber: number;\n  owningPortUID: string;\n  channelLabel: string;\n}\n\nexport interface AvAudioSessionRoute {\n  portName: string;\n  portType: AvAudioSessionPortType;\n  channels: AvAudioSessionChannel[];\n  uid: string;\n  hasHardwareVoiceCallProcessing: boolean;\n  isSpatialAudioEnabled: boolean;\n}\n\nexport type AirplayConnectivityContext = NativeModule & {\n  fetchAvAudioSessionRoutes: () => Promise<AvAudioSessionRoute[]>;\n};\n\nexport type RoutePickerContext = NativeModule & {\n  showRoutePicker: (options?: ShowRoutePickerOptions) => Promise<void>;\n};\n\nexport type ShowRoutePickerOptions = {\n  prioritizesVideoDevices?: boolean;\n};\n\nconst {\n  RAEvents,\n  RAAirplayConnectivityContext,\n  RAExternalPlaybackAvailabilityContext,\n  RARoutePickerContext,\n} = NativeModules as {\n  RAEvents?: {getConstants: () => Record<string, string>};\n  RAAirplayConnectivityContext?: AirplayConnectivityContext;\n  RAExternalPlaybackAvailabilityContext?: ExternalPlaybackAvailabilityContext;\n  RARoutePickerContext?: RoutePickerContext;\n};\n\nconst constants = RAEvents?.getConstants();\n\nexport const AirplayConnectivityContext = RAAirplayConnectivityContext;\nexport const ExternalPlaybackAvailabilityContext =\n  RAExternalPlaybackAvailabilityContext;\n\nexport const {\n  EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED,\n  AV_AUDIO_SESSION_ROUTES_CHANGED,\n} = constants ?? {};\n\nexport const ExternalPlaybackAvailabilityEventEmitter = new NativeEventEmitter(\n  RAExternalPlaybackAvailabilityContext,\n);\n\nexport const AirplayConnectivityEventEmitter = new NativeEventEmitter(\n  RAAirplayConnectivityContext,\n);\n\nexport const onExternalPlaybackAvailabilityChanged = (\n  callback: (availability: boolean) => void,\n) =>\n  ExternalPlaybackAvailabilityEventEmitter.addListener(\n    EXTERNAL_PLAYBACK_AVAILABILITY_CHANGED,\n    callback,\n  );\n\nexport const onAvAudioSessionRoutesChanged = (\n  callback: (routes: AvAudioSessionRoute[]) => void,\n) =>\n  AirplayConnectivityEventEmitter.addListener(\n    AV_AUDIO_SESSION_ROUTES_CHANGED,\n    callback,\n  );\n\nexport const showRoutePicker = (options: ShowRoutePickerOptions) => {\n  if (Platform.OS !== 'ios' && RARoutePickerContext === undefined) {\n    console.warn('showRoutePicker is only supported on iOS');\n  }\n\n  return RARoutePickerContext?.showRoutePicker(options) ?? Promise.resolve();\n};\n"]}